/*
 * Created on 2025-07-27 ( 01:57:20 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 3.3.0
 */
package com.project.PCBuilder.rest.services;

import java.util.List;
import java.util.Optional;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.project.PCBuilder.persistence.entities.Pcbuild;
import com.project.PCBuilder.persistence.repositories.PcbuildRepository;
import com.project.PCBuilder.rest.dto.PcbuildDTO;
import com.project.PCBuilder.rest.services.commons.GenericService;
import com.project.PCBuilder.persistence.entities.PcbuildId;

import com.project.PCBuilder.persistence.entities.Components;
import com.project.PCBuilder.persistence.repositories.ComponentsRepository;
import com.project.PCBuilder.persistence.entities.Pcs;
import com.project.PCBuilder.persistence.repositories.PcsRepository;

/**
 * REST service for entity "Pcbuild" <br>
 * 
 * This service provides all the necessary operations required by the REST controller <br>
 * Enhanced to handle foreign key relationships and one-to-one cascading <br>
 * 
 * @author Telosys
 *
 */
@Service
@Transactional
public class PcbuildService extends GenericService<Pcbuild, PcbuildDTO> {

	private static final Logger logger = LoggerFactory.getLogger(PcbuildService.class);

	private final PcbuildRepository repository; // injected by constructor

	private final ComponentsRepository componentsRepository;
	private final PcsRepository pcsRepository;

	/**
	 * Constructor (usable for Dependency Injection)
	 * 
	 * @param repository the repository to be injected
	 * @param componentsRepository the Components repository to be injected
	 * @param pcsRepository the Pcs repository to be injected
	 */
	public PcbuildService(PcbuildRepository repository, ComponentsRepository componentsRepository, PcsRepository pcsRepository) {
		super(Pcbuild.class, PcbuildDTO.class);
		this.repository = repository;
		this.componentsRepository = componentsRepository;
		this.pcsRepository = pcsRepository;
	}
	
	/**
	 * Returns the entity ID object from the given DTO
	 *
	 * @param dto
	 * @return
	 */
	private PcbuildId getEntityId(PcbuildDTO dto) {
		return new PcbuildId(dto.getPcid(), dto.getComponentid());
	}

	/**
	 * Validates foreign key references before saving
	 *
	 * @param dto
	 * @throws IllegalArgumentException if any FK reference is invalid
	 */
	private void validateForeignKeyReferences(PcbuildDTO dto) {
		// Validate Components reference
		if (dto.getComponentid() != null) {
			if (!componentsRepository.existsById(dto.getComponentid())) {
				throw new IllegalArgumentException("Invalid Components reference: " + dto.getComponentid());
			}
		}
		// Validate Pcs reference
		if (dto.getPcid() != null) {
			if (!pcsRepository.existsById(dto.getPcid())) {
				throw new IllegalArgumentException("Invalid Pcs reference: " + dto.getPcid());
			}
		}
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	public List<PcbuildDTO> findAll() {
		logger.debug("findAll()");
		Iterable<Pcbuild> all = repository.findAll();
		return entityListToDtoList(all);
	}

	/**
	 * Finds the entity identified by the given PK
	 *
	 * @param pcid 
	 * @param componentid 
	 * @return the entity or null if not found
	 */
	public PcbuildDTO findById(Integer pcid, Integer componentid) {
		PcbuildId entityId = new PcbuildId(pcid, componentid);
		logger.debug("findById({})", entityId);
		Optional<Pcbuild> optionalEntity = repository.findById(entityId);
		return entityToDto(optionalEntity);
	}

	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist) <br>
	 * Validates foreign key references before saving
	 *
	 * @param pcid 
	 * @param componentid 
	 * @param dto 
	 */
	public void save(Integer pcid, Integer componentid, PcbuildDTO dto) {
		PcbuildId entityId = new PcbuildId(pcid, componentid);
		logger.debug("save({},{})", entityId, dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		// force PK in DTO (just to be sure to conform with the given PK) 
		dto.setPcid(pcid);
		dto.setComponentid(componentid);


		repository.save(dtoToEntity(dto));
	}

	/**
	 * Updates the given entity if it exists <br>
	 * Validates foreign key references before updating
	 *
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean update(PcbuildDTO dto) {
		logger.debug("update({})", dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		if (repository.existsById(getEntityId(dto))) {
			repository.save(dtoToEntity(dto));
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists <br>
	 * Validates foreign key references for non-null FK fields
	 *
	 * @param pcid 
	 * @param componentid 
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate(Integer pcid, Integer componentid, PcbuildDTO dto) {
		PcbuildId entityId = new PcbuildId(pcid, componentid);
		logger.debug("partialUpdate({}, {})", entityId, dto);
		
		Optional<Pcbuild> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			Pcbuild entity = optionalEntity.get();
			
			// Update only non-null fields from DTO
			if (dto.getCreatedat() != null) {
				entity.setCreatedat(dto.getCreatedat());
			}
			
			repository.save(entity);
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Creates the given entity <br>
	 * Validates foreign key references before creating
	 *
	 * @param dto
	 * @return true if created, false if already exists
	 */
	public boolean create(PcbuildDTO dto) {
		logger.debug("create({})", dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		if (repository.existsById(getEntityId(dto))) {
			return false; // already exists, not created
		} else {
			repository.save(dtoToEntity(dto));
			return true; // created
		}
	}


	/**
	 * Deletes an entity by its PK <br>
	 * Handles cascading delete for one-to-one relationships
	 *
	 * @param pcid 
	 * @param componentid 
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById(Integer pcid, Integer componentid) {
		PcbuildId entityId = new PcbuildId(pcid, componentid);
		logger.debug("deleteById({})", entityId);
		
		if (repository.existsById(entityId)) {
			
			repository.deleteById(entityId);
			return true; // found and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	// -----------------------------------------------------------------------------------------
	// Specific "finders" for foreign key relationships
	// -----------------------------------------------------------------------------------------
	
	/**
	 * Finds entities by Components reference
	 *
	 * @param componentid the Components ID
	 * @return list of entities
	 */
	
	/***
	public List<PcbuildDTO> findByComponents(Integer componentid) {
		logger.debug("findByComponents({})", componentid);
		List<Pcbuild> list = repository.findByComponentID(componentid);
		return entityListToDtoList(list);
	}
	
	/**
	 * Finds entities by Pcs reference
	 *
	 * @param pcid the Pcs ID
	 * @return list of entities
	 */
	
	/***
	public List<PcbuildDTO> findByPcs(Integer pcid) {
		logger.debug("findByPcs({})", pcid);
		List<Pcbuild> list = repository.findByPCID(pcid);
		return entityListToDtoList(list);
	}


/***
	// Example custom finders - uncomment and modify as needed
	public List<PcbuildDTO> findByTitle(String title) {
		logger.debug("findByTitle({})", title);
		List<Pcbuild> list = repository.findByTitleContaining(title);
		return entityListToDtoList(list);
	}

	public List<PcbuildDTO> findByPrice(BigDecimal price) {
		logger.debug("findByPrice({})", price);
		List<Pcbuild> list = repository.findByPrice(price);
		return entityListToDtoList(list);
	}
***/
}