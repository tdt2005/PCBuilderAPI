/*
 * Created on 2025-07-29 ( 09:46:08 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 3.3.0
 */

package com.project.PCBuilder.rest.services;

import java.sql.Date;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Optional;
import java.util.UUID;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.project.PCBuilder.persistence.entities.Accounts;
import com.project.PCBuilder.persistence.repositories.AccountsRepository;
import com.project.PCBuilder.rest.dto.AccountsDTO;
import com.project.PCBuilder.rest.services.commons.GenericService;


/**
 * REST service for entity "Accounts" <br>
 * 
 * This service provides all the necessary operations required by the REST controller <br>
 * Enhanced to handle foreign key relationships and one-to-one cascading <br>
 * 
 * @author Telosys
 *
 */
@Service
@Transactional
public class AccountsService extends GenericService<Accounts, AccountsDTO> {

	private static final Logger logger = LoggerFactory.getLogger(AccountsService.class);

	private final AccountsRepository repository; 
	private PasswordEncoder passwordEncoder;

	/**
	 * Constructor (usable for Dependency Injection)
	 * 
	 * @param repository the repository to be injected
	 */
	@Autowired
	public AccountsService(AccountsRepository repository,PasswordEncoder passwordEncoder) {
		super(Accounts.class, AccountsDTO.class);
		this.repository = repository;
		this.passwordEncoder = passwordEncoder;
	}
	
	/**
	 * Returns the entity ID object from the given DTO
	 *
	 * @param dto
	 * @return
	 */
	private Integer getEntityId(AccountsDTO dto) {
		return dto.getAccountid();
	}

	/**
	 * Validates foreign key references before saving
	 *
	 * @param dto
	 * @throws IllegalArgumentException if any FK reference is invalid
	 */
	private void validateForeignKeyReferences(AccountsDTO dto) {
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	public List<AccountsDTO> findAll() {
		logger.debug("findAll()");
		Iterable<Accounts> all = repository.findAll();
		return entityListToDtoList(all);
	}

	/**
	 * Finds the entity identified by the given PK
	 *
	 * @param accountid 
	 * @return the entity or null if not found
	 */
	public AccountsDTO findById(Integer accountid) {
		Integer entityId = accountid;
		logger.debug("findById({})", entityId);
		Optional<Accounts> optionalEntity = repository.findById(entityId);
		return entityToDto(optionalEntity);
	}
	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist) <br>
	 * Validates foreign key references before saving
	 *
	 * @param accountid 
	 * @param dto 
	 */
	public void save(Integer accountid, AccountsDTO dto) {
		Integer entityId = accountid;
		logger.debug("save({},{})", entityId, dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		// force PK in DTO (just to be sure to conform with the given PK) 
		dto.setAccountid(accountid);


		repository.save(dtoToEntity(dto));
	}

	/**
	 * Updates the given entity if it exists <br>
	 * Validates foreign key references before updating
	 *
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean update(AccountsDTO dto) {
		logger.debug("update({})", dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		if (repository.existsById(getEntityId(dto))) {
			repository.save(dtoToEntity(dto));
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists <br>
	 * Validates foreign key references for non-null FK fields
	 *
	 * @param accountid 
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate(Integer accountid, AccountsDTO dto) {
		Integer entityId = accountid;
		logger.debug("partialUpdate({}, {})", entityId, dto);
		
		Optional<Accounts> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			Accounts entity = optionalEntity.get();
			
			// Update only non-null fields from DTO
			if (dto.getFirstname() != null) {
				entity.setFirstname(dto.getFirstname());
			}
			if (dto.getLastname() != null) {
				entity.setLastname(dto.getLastname());
			}
			if (dto.getEmail() != null) {
				entity.setEmail(dto.getEmail());
			}
			if (dto.getPasswordhased() != null) {
				entity.setPasswordhased(dto.getPasswordhased());
			}
			if (dto.getIsverified() != null) {
				entity.setIsverified(dto.getIsverified());
			}
			if (dto.getToken() != null) {
				entity.setToken(dto.getToken());
			}
			if (dto.getTokenexpiry() != null) {
				entity.setTokenexpiry(dto.getTokenexpiry());
			}
			
			repository.save(entity);
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}
	
	// in AccountsService
	public boolean register(AccountsDTO dto) {
	    if (repository.findByEmail(dto.getEmail()).isPresent()) return false;
	    String raw = dto.getPasswordhased();
	    dto.setPasswordhased(passwordEncoder.encode(raw));
	    dto.setIsverified(false);
	    dto.setToken(UUID.randomUUID().toString());
	    dto.setTokenexpiry(Date.from(
	        Instant.now().plus(24, ChronoUnit.HOURS)
	    ));
	    repository.save(dtoToEntity(dto));
	    return true;
	}

	public boolean verifyEmail(String token) {
	    Optional<Accounts> opt = repository.findByToken(token);
	    if (opt.isEmpty()) return false;
	    Accounts a = opt.get();
	    if (a.getTokenexpiry().before(new java.sql.Date(System.currentTimeMillis()))) return false;
	    a.setIsverified(true);
	    a.setToken(null);
	    a.setTokenexpiry(null);
	    repository.save(a);
	    return true;
	}
	public boolean requestPasswordReset(String email) {
	    Optional<Accounts> opt = repository.findByEmail(email);
	    if (opt.isEmpty()) return false;

	    Accounts account = opt.get();
	    if (!Boolean.TRUE.equals(account.getIsverified())) return false;

	    // Generate token and expiry
	    account.setToken(UUID.randomUUID().toString());
	    account.setTokenexpiry(Date.from(Instant.now().plus(1, ChronoUnit.HOURS))); // 1 hour validity
	    repository.save(account);
	    return true;
	}
	public String getTokenByEmail(String email) {
	    return repository.findByEmail(email)
	        .map(Accounts::getToken)
	        .orElse(null); 
	    }

	public boolean resetPassword(String token, String newPassword) {
	    Optional<Accounts> opt = repository.findByToken(token);
	    if (opt.isEmpty()) return false;

	    Accounts account = opt.get();
	    if (account.getTokenexpiry().before(new java.sql.Date(System.currentTimeMillis()))) return false;

	    account.setPasswordhased(passwordEncoder.encode(newPassword));
	    account.setToken(null);
	    account.setTokenexpiry(null);
	    repository.save(account);
	    return true;
	}

	// Add this method to your AccountsService.java class:

	public AccountsDTO authenticateUser(String email, String password) {
	    Optional<Accounts> accountOpt = repository.findByEmail(email);
	    
	    if (accountOpt.isEmpty()) {
	        return null; // User not found
	    }
	    
	    Accounts account = accountOpt.get();
	    
	    // Check if account is verified
	    if (!Boolean.TRUE.equals(account.getIsverified())) {
	        throw new RuntimeException("ACCOUNT_NOT_VERIFIED");
	    }
	    
	    // Check password
	    if (!passwordEncoder.matches(password, account.getPasswordhased())) {
	        return null; // Invalid password
	    }
	    
	    // Return the account as DTO
	    return entityToDto(Optional.of(account));
	}

	/**
	 * Creates the given entity <br>
	 * Validates foreign key references before creating
	 *
	 * @param dto
	 * @return true if created, false if already exists
	 */
	public boolean create(AccountsDTO dto) {
		logger.debug("create({})", dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		// auto-generated Primary Key
		repository.save(dtoToEntity(dto));
		return true; // always created
	}


	/**
	 * Deletes an entity by its PK <br>
	 * Handles cascading delete for one-to-one relationships
	 *
	 * @param accountid 
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById(Integer accountid) {
		Integer entityId = accountid;
		logger.debug("deleteById({})", entityId);
		
		if (repository.existsById(entityId)) {
			
			repository.deleteById(entityId);
			return true; // found and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	// -----------------------------------------------------------------------------------------
	// Specific "finders" for foreign key relationships
	// -----------------------------------------------------------------------------------------


/***
	// Example custom finders - uncomment and modify as needed
	public List<AccountsDTO> findByTitle(String title) {
		logger.debug("findByTitle({})", title);
		List<Accounts> list = repository.findByTitleContaining(title);
		return entityListToDtoList(list);
	}

	public List<AccountsDTO> findByPrice(BigDecimal price) {
		logger.debug("findByPrice({})", price);
		List<Accounts> list = repository.findByPrice(price);
		return entityListToDtoList(list);
	}
***/
}
