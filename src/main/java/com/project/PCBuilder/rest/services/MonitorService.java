/*
 * Created on 2025-08-02 ( 10:32:54 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 3.3.0
 */
package com.project.PCBuilder.rest.services;

import java.util.List;
import java.util.Optional;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.stream.Collectors;

import com.project.PCBuilder.persistence.entities.Monitor;
import com.project.PCBuilder.persistence.repositories.MonitorRepository;
import com.project.PCBuilder.rest.dto.MonitorDTO;
import com.project.PCBuilder.rest.services.commons.GenericService;

import com.project.PCBuilder.persistence.entities.Parts;
import com.project.PCBuilder.persistence.repositories.PartsRepository;
import com.project.PCBuilder.rest.dto.PartsDTO;

import jakarta.persistence.EntityManager;
import jakarta.persistence.ParameterMode;
import jakarta.persistence.StoredProcedureQuery;

/**
 * REST service for entity "Monitor" <br>
 * 
 * This service provides all the necessary operations required by the REST controller <br>
 * Enhanced to handle foreign key relationships and one-to-one cascading <br>
 * 
 * @author Telosys
 *
 */
@Service
@Transactional
public class MonitorService extends GenericService<Monitor, MonitorDTO> {

	private static final Logger logger = LoggerFactory.getLogger(MonitorService.class);

	private final MonitorRepository repository; // injected by constructor

	private final PartsRepository partsRepository;
	
	private final EntityManager em;

	/**
	 * Constructor (usable for Dependency Injection)
	 * 
	 * @param repository the repository to be injected
	 * @param partsRepository the Parts repository to be injected
	 */
	public MonitorService(MonitorRepository repository, PartsRepository partsRepository, EntityManager em) {
		super(Monitor.class, MonitorDTO.class);
		this.repository = repository;
		this.partsRepository = partsRepository;
		this.em = em;
	}
	
	/**
	 * Returns the entity ID object from the given DTO
	 *
	 * @param dto
	 * @return
	 */
	private Integer getEntityId(MonitorDTO dto) {
		return dto.getPartid();
	}

	/**
	 * Validates foreign key references before saving
	 *
	 * @param dto
	 * @throws IllegalArgumentException if any FK reference is invalid
	 */
	private void validateForeignKeyReferences(MonitorDTO dto) {
		// Validate Parts reference
		if (dto.getPartid() != null) {
			if (!partsRepository.existsById(dto.getPartid())) {
				throw new IllegalArgumentException("Invalid Parts reference: " + dto.getPartid());
			}
		}
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	/*
	 * public List<MonitorDTO> findAll() {
			logger.debug("findAll()");
			Iterable<Monitor> all = repository.findAll();
			return entityListToDtoList(all);
		}
	 */
	public List<MonitorDTO> findAll(int pageNumber, int pageSize, String searchName, BigDecimal minPrice, BigDecimal maxPrice, String sortBy, String sortDirection) {
	    logger.debug("findAll() via stored procedure with parameters");

	    StoredProcedureQuery sp = em.createStoredProcedureQuery("sp_GetMonitorsWithPagination");

	    sp.registerStoredProcedureParameter("PageNumber", Integer.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("PageSize", Integer.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("SearchName", String.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("MinPrice", BigDecimal.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("MaxPrice", BigDecimal.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("SortBy", String.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("SortDirection", String.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("TotalCount", Integer.class, ParameterMode.OUT);

	    sp.setParameter("PageNumber", pageNumber);
	    sp.setParameter("PageSize", pageSize);
	    sp.setParameter("SearchName", searchName);
	    sp.setParameter("MinPrice", minPrice);
	    sp.setParameter("MaxPrice", maxPrice);
	    sp.setParameter("SortBy", sortBy);
	    sp.setParameter("SortDirection", sortDirection);

	    @SuppressWarnings("unchecked")
	    List<Object[]> rows = sp.getResultList();

	    return rows.stream().map(r -> {
	        MonitorDTO monitorDto = new MonitorDTO();

	        PartsDTO parts = new PartsDTO();
	        parts.setPartid((Integer) r[0]);
	        parts.setPartname((String) r[1]);
	        parts.setPartprice((BigDecimal) r[2]);

	        monitorDto.setPartid(parts.getPartid());
	        monitorDto.setParts(parts);
	        monitorDto.setScreenSize((BigDecimal) r[3]);
	        monitorDto.setResolution((String) r[4]);
	        monitorDto.setRefreshRate((Integer) r[5]);
	        monitorDto.setResponseTime((BigDecimal) r[6]);
	        monitorDto.setPanelType((String) r[7]);
	        monitorDto.setAspectRatio((String) r[8]);

	        return monitorDto;
	    }).collect(Collectors.toList());
	}

	/**
	 * Finds the entity identified by the given PK
	 *
	 * @param partid 
	 * @return the entity or null if not found
	 */
	public MonitorDTO findById(Integer partid) {
		Integer entityId = partid;
		logger.debug("findById({})", entityId);
		Optional<Monitor> optionalEntity = repository.findById(entityId);
		return entityToDto(optionalEntity);
	}

	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist) <br>
	 * Validates foreign key references before saving
	 *
	 * @param partid 
	 * @param dto 
	 */
	public void save(Integer partid, MonitorDTO dto) {
		Integer entityId = partid;
		logger.debug("save({},{})", entityId, dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		// force PK in DTO (just to be sure to conform with the given PK) 
		dto.setPartid(partid);


		repository.save(dtoToEntity(dto));
	}

	/**
	 * Updates the given entity if it exists <br>
	 * Validates foreign key references before updating
	 *
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean update(MonitorDTO dto) {
		logger.debug("update({})", dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		if (repository.existsById(getEntityId(dto))) {
			repository.save(dtoToEntity(dto));
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists <br>
	 * Validates foreign key references for non-null FK fields
	 *
	 * @param partid 
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate(Integer partid, MonitorDTO dto) {
		Integer entityId = partid;
		logger.debug("partialUpdate({}, {})", entityId, dto);
		
		Optional<Monitor> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			Monitor entity = optionalEntity.get();
			
			// Update only non-null fields from DTO
			if (dto.getScreenSize() != null) {
				entity.setScreenSize(dto.getScreenSize());
			}
			if (dto.getResolution() != null) {
				entity.setResolution(dto.getResolution());
			}
			if (dto.getRefreshRate() != null) {
				entity.setRefreshRate(dto.getRefreshRate());
			}
			if (dto.getResponseTime() != null) {
				entity.setResponseTime(dto.getResponseTime());
			}
			if (dto.getPanelType() != null) {
				entity.setPanelType(dto.getPanelType());
			}
			if (dto.getAspectRatio() != null) {
				entity.setAspectRatio(dto.getAspectRatio());
			}
			
			repository.save(entity);
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Creates the given entity <br>
	 * Validates foreign key references before creating
	 *
	 * @param dto
	 * @return true if created, false if already exists
	 */
	public boolean create(MonitorDTO dto) {
		logger.debug("create({})", dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		if (repository.existsById(getEntityId(dto))) {
			return false; // already exists, not created
		} else {
			repository.save(dtoToEntity(dto));
			return true; // created
		}
	}


	/**
	 * Deletes an entity by its PK <br>
	 * Handles cascading delete for one-to-one relationships
	 *
	 * @param partid 
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById(Integer partid) {
		Integer entityId = partid;
		logger.debug("deleteById({})", entityId);
		
		if (repository.existsById(entityId)) {
			
			repository.deleteById(entityId);
			return true; // found and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	// -----------------------------------------------------------------------------------------
	// Specific "finders" for foreign key relationships
	// -----------------------------------------------------------------------------------------
	
	/**
	 * Finds entities by Parts reference
	 *
	 * @param partid the Parts ID
	 * @return list of entities
	 */ /*
	public List<MonitorDTO> findByParts(Integer partid) {
		logger.debug("findByParts({})", partid);
		List<Monitor> list = repository.findByPartID(partid);
		return entityListToDtoList(list);
	}


/***
	// Example custom finders - uncomment and modify as needed
	public List<MonitorDTO> findByTitle(String title) {
		logger.debug("findByTitle({})", title);
		List<Monitor> list = repository.findByTitleContaining(title);
		return entityListToDtoList(list);
	}

	public List<MonitorDTO> findByPrice(BigDecimal price) {
		logger.debug("findByPrice({})", price);
		List<Monitor> list = repository.findByPrice(price);
		return entityListToDtoList(list);
	}
***/
}