## --------------------------------------------------
#if ( $entity.isJoinEntity() )
#cancel("No SERVICE class for join entity")
#end
## --------------------------------------------------
#checkId($entity)
#parse("include/init_var_entity.vm")
#parse("include/java_header.vm")
##---------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};

import java.util.List;
import java.util.Optional;

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.stream.Collectors;

import ${ROOT_PKG}.persistence.entities.${jpaEntityClass};
import ${ROOT_PKG}.persistence.repositories.${repositoryClass};
import ${ROOT_PKG}.rest.dto.${dtoClass};
import ${ROOT_PKG}.rest.services.commons.GenericService;
#if ( $entity.hasCompositePrimaryKey() )
import ${ROOT_PKG}.persistence.entities.${jpaEntityIdClass};
#end

## Import related entity classes and repositories for FK handling
#foreach( $link in $entity.links )
#if ( $link.isCardinalityManyToOne() || $link.isCardinalityOneToOne() )
import ${ROOT_PKG}.persistence.entities.${link.targetEntity.name};
import ${ROOT_PKG}.persistence.repositories.${link.targetEntity.name}Repository;
import ${ROOT_PKG}.rest.dto.${link.targetEntity.name}DTO;
#end
#end

import jakarta.persistence.EntityManager;
import jakarta.persistence.ParameterMode;
import jakarta.persistence.StoredProcedureQuery;

/**
 * REST service for entity "${entity.name}" <br>
 * 
 * This service provides all the necessary operations required by the REST controller <br>
 * Enhanced to handle foreign key relationships and one-to-one cascading <br>
 * 
 * @author Telosys
 *
 */
@Service
@Transactional
public class ${serviceClass} extends GenericService<${jpaEntityClass}, ${dtoClass}> {

	private static final Logger logger = LoggerFactory.getLogger(${serviceClass}.class);

	private final ${repositoryClass} repository; // injected by constructor

## Inject repositories for related entities
#foreach( $link in $entity.links )
#if ( $link.isCardinalityManyToOne() || $link.isCardinalityOneToOne() )
	private final ${link.targetEntity.name}Repository ${link.targetEntity.name.toLowerCase()}Repository;
#end
#end
	
	private final EntityManager em;

	/**
	 * Constructor (usable for Dependency Injection)
	 * 
	 * @param repository the repository to be injected
#foreach( $link in $entity.links )
#if ( $link.isCardinalityManyToOne() || $link.isCardinalityOneToOne() )
	 * @param ${link.targetEntity.name.toLowerCase()}Repository the ${link.targetEntity.name} repository to be injected
#end
#end
	 */
	public ${serviceClass}(${repositoryClass} repository#foreach( $link in $entity.links )#if ( $link.isCardinalityManyToOne() || $link.isCardinalityOneToOne() ), ${link.targetEntity.name}Repository ${link.targetEntity.name.toLowerCase()}Repository#end#end, EntityManager em) {
		super(${jpaEntityClass}.class, ${dtoClass}.class);
		this.repository = repository;
#foreach( $link in $entity.links )
#if ( $link.isCardinalityManyToOne() || $link.isCardinalityOneToOne() )
		this.${link.targetEntity.name.toLowerCase()}Repository = ${link.targetEntity.name.toLowerCase()}Repository;
#end
#end
		this.em = em;
	}
	
	/**
	 * Returns the entity ID object from the given DTO
	 *
	 * @param dto
	 * @return
	 */
	private $jpaEntityIdClass getEntityId(${dtoClass} dto) {
#if ( $entity.hasCompositePrimaryKey() )
		return new $jpaEntityIdClass($fn.argumentsListWithGetter("dto", $entity.keyAttributes));
#else
		return dto.${entity.keyAttribute.getter}();
#end
	}

	/**
	 * Validates foreign key references before saving
	 *
	 * @param dto
	 * @throws IllegalArgumentException if any FK reference is invalid
	 */
	private void validateForeignKeyReferences(${dtoClass} dto) {
#foreach( $link in $entity.links )
#if ( $link.isCardinalityManyToOne() || $link.isCardinalityOneToOne() )
#foreach( $linkAttribute in $link.attributes )
#set( $fkAttribute = $linkAttribute.originAttribute )
		// Validate ${link.targetEntity.name} reference
#if( $fkAttribute.name.toLowerCase() == "interface" )
		if (dto.getInterfaceField() != null) {
			if (!${link.targetEntity.name.toLowerCase()}Repository.existsById(dto.getInterfaceField())) {
				throw new IllegalArgumentException("Invalid ${link.targetEntity.name} reference: " + dto.getInterfaceField());
			}
		}
#else
		if (dto.${fkAttribute.getter}() != null) {
			if (!${link.targetEntity.name.toLowerCase()}Repository.existsById(dto.${fkAttribute.getter}())) {
				throw new IllegalArgumentException("Invalid ${link.targetEntity.name} reference: " + dto.${fkAttribute.getter}());
			}
		}
#end
#end
#end
#end
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	/*
	 * public List<${dtoClass}> findAll() {
			logger.debug("findAll()");
			Iterable<${jpaEntityClass}> all = repository.findAll();
			return entityListToDtoList(all);
		}
	 */
	public List<${dtoClass}> findAll(int pageNumber, int pageSize, String searchName, BigDecimal minPrice, BigDecimal maxPrice, String sortBy, String sortDirection) {
	    logger.debug("findAll() via stored procedure with parameters");

	    StoredProcedureQuery sp = em.createStoredProcedureQuery("sp_Get${entity.name}sWithPagination");

	    sp.registerStoredProcedureParameter("PageNumber", Integer.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("PageSize", Integer.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("SearchName", String.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("MinPrice", BigDecimal.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("MaxPrice", BigDecimal.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("SortBy", String.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("SortDirection", String.class, ParameterMode.IN);
	    sp.registerStoredProcedureParameter("TotalCount", Integer.class, ParameterMode.OUT);

	    sp.setParameter("PageNumber", pageNumber);
	    sp.setParameter("PageSize", pageSize);
	    sp.setParameter("SearchName", searchName);
	    sp.setParameter("MinPrice", minPrice);
	    sp.setParameter("MaxPrice", maxPrice);
	    sp.setParameter("SortBy", sortBy);
	    sp.setParameter("SortDirection", sortDirection);

	    @SuppressWarnings("unchecked")
	    List<Object[]> rows = sp.getResultList();

	    return rows.stream().map(r -> {
	        ${dtoClass} ${fn.uncapitalize($entity.name)}Dto = new ${dtoClass}();

#foreach( $link in $entity.links )
#if ( $link.isCardinalityManyToOne() || $link.isCardinalityOneToOne() )
	        ${link.targetEntity.name}DTO ${fn.uncapitalize($link.targetEntity.name)} = new ${link.targetEntity.name}DTO();
	        ${fn.uncapitalize($link.targetEntity.name)}.set${fn.capitalize($link.targetEntity.keyAttribute.name)}((Integer) r[0]);
	        ${fn.uncapitalize($link.targetEntity.name)}.set${fn.capitalize($link.targetEntity.nonKeyAttributes.get(0).name)}((String) r[1]);
	        ${fn.uncapitalize($link.targetEntity.name)}.set${fn.capitalize($link.targetEntity.nonKeyAttributes.get(1).name)}((BigDecimal) r[2]);

	        ${fn.uncapitalize($entity.name)}Dto.set${fn.capitalize($entity.keyAttribute.name)}(${fn.uncapitalize($link.targetEntity.name)}.get${fn.capitalize($link.targetEntity.keyAttribute.name)}());
	        ${fn.uncapitalize($entity.name)}Dto.set${fn.capitalize($link.targetEntity.name)}(${fn.uncapitalize($link.targetEntity.name)});
#break
#end
#end
#set($index = 3)
#foreach( $attribute in $entity.nonKeyAttributes )
#if ( !$attribute.name.toLowerCase().contains("partid") && !$attribute.name.toLowerCase().contains("componentid") )
#if ( $attribute.type == "Integer" )
	        ${fn.uncapitalize($entity.name)}Dto.set${fn.capitalize($attribute.name)}((Integer) r[${index}]);
#elseif ( $attribute.type == "BigDecimal" )
	        ${fn.uncapitalize($entity.name)}Dto.set${fn.capitalize($attribute.name)}((BigDecimal) r[${index}]);
#else
	        ${fn.uncapitalize($entity.name)}Dto.set${fn.capitalize($attribute.name)}((String) r[${index}]);
#end
#set($index = $index + 1)
#end
#end

	        return ${fn.uncapitalize($entity.name)}Dto;
	    }).collect(Collectors.toList());
	}

#if ( $entity.hasCompositePrimaryKey() )
#set( $entityIdInit = "new $jpaEntityIdClass($fn.argumentsList($entity.keyAttributes))" )
#else
#set( $entityIdInit = "${entity.keyAttribute.name}" )
#end
	/**
	 * Finds the entity identified by the given PK
	 *
#foreach( $attribute in $entity.keyAttributes )   
	 * @param $attribute.name 
#end
	 * @return the entity or null if not found
	 */
	public ${dtoClass} findById($fn.argumentsListWithType($entity.keyAttributes)) {
		${jpaEntityIdClass} entityId = ${entityIdInit};
		logger.debug("findById({})", entityId);
		Optional<${jpaEntityClass}> optionalEntity = repository.findById(entityId);
		return entityToDto(optionalEntity);
	}

	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist) <br>
	 * Validates foreign key references before saving
	 *
#foreach( $attribute in $entity.keyAttributes )
	 * @param $attribute.name 
#end
	 * @param dto 
	 */
	public void save($fn.argumentsListWithType($entity.keyAttributes), ${dtoClass} dto) {
		${jpaEntityIdClass} entityId = ${entityIdInit};
		logger.debug("save({},{})", entityId, dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		// force PK in DTO (just to be sure to conform with the given PK) 
#foreach( $attribute in $entity.keyAttributes )
		dto.${attribute.setter}(${attribute.name});
#end

## Handle one-to-one relationship creation if this is a child entity
#foreach( $link in $entity.links )
#if ( $link.isCardinalityOneToOne() && $link.isOwningEntity() )
		// Handle one-to-one relationship - create parent entity if needed
		handleOneToOneRelationshipCreation(dto);
#end
#end

		repository.save(dtoToEntity(dto));
	}

	/**
	 * Updates the given entity if it exists <br>
	 * Validates foreign key references before updating
	 *
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean update(${dtoClass} dto) {
		logger.debug("update({})", dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
		if (repository.existsById(getEntityId(dto))) {
			repository.save(dtoToEntity(dto));
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists <br>
	 * Validates foreign key references for non-null FK fields
	 *
#foreach( $attribute in $entity.keyAttributes )   
	 * @param $attribute.name 
#end
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate($fn.argumentsListWithType($entity.keyAttributes), ${dtoClass} dto) {
		${jpaEntityIdClass} entityId = ${entityIdInit};
		logger.debug("partialUpdate({}, {})", entityId, dto);
		
		Optional<${jpaEntityClass}> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			${jpaEntityClass} entity = optionalEntity.get();
			
			// Update only non-null fields from DTO
#foreach( $attribute in $entity.nonKeyAttributes )
			if (dto.${attribute.getter}() != null) {
#set( $isForeignKey = false )
#foreach( $link in $entity.links )
#if ( $link.isCardinalityManyToOne() || $link.isCardinalityOneToOne() )
#foreach( $linkAttribute in $link.attributes )
#if ( $linkAttribute.originAttribute.name == $attribute.name )
#set( $isForeignKey = true )
				// Validate FK reference before updating
#if( $attribute.name.toLowerCase() == "interface" )
				if (!${link.targetEntity.name.toLowerCase()}Repository.existsById(dto.getInterfaceField())) {
					throw new IllegalArgumentException("Invalid ${link.targetEntity.name} reference: " + dto.getInterfaceField());
				}
#else
				if (!${link.targetEntity.name.toLowerCase()}Repository.existsById(dto.${attribute.getter}())) {
					throw new IllegalArgumentException("Invalid ${link.targetEntity.name} reference: " + dto.${attribute.getter}());
				}
#end
#end
#end
#end
#end
				entity.${attribute.setter}(dto.${attribute.getter}());
			}
#end
			
			repository.save(entity);
			return true; // found and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Creates the given entity <br>
	 * Validates foreign key references before creating
	 *
	 * @param dto
	 * @return true if created, false if already exists
	 */
	public boolean create(${dtoClass} dto) {
		logger.debug("create({})", dto);
		
		// Validate foreign key references
		validateForeignKeyReferences(dto);
		
#if ($entity.hasAutoIncrementedKey() )
		// auto-generated Primary Key
## Handle one-to-one relationship creation if this is a child entity
#foreach( $link in $entity.links )
#if ( $link.isCardinalityOneToOne() && $link.isOwningEntity() )
		// Handle one-to-one relationship - create parent entity if needed
		handleOneToOneRelationshipCreation(dto);
#end
#end
		repository.save(dtoToEntity(dto));
		return true; // always created
#else	
		if (repository.existsById(getEntityId(dto))) {
			return false; // already exists, not created
		} else {
## Handle one-to-one relationship creation if this is a child entity
#foreach( $link in $entity.links )
#if ( $link.isCardinalityOneToOne() && $link.isOwningEntity() )
			// Handle one-to-one relationship - create parent entity if needed
			handleOneToOneRelationshipCreation(dto);
#end
#end
			repository.save(dtoToEntity(dto));
			return true; // created
		}
#end
	}

## Add method to handle one-to-one relationship creation
#foreach( $link in $entity.links )
#if ( $link.isCardinalityOneToOne() && $link.isOwningEntity() )
	/**
	 * Handles one-to-one relationship creation for ${link.targetEntity.name}
	 * Creates the parent entity if it doesn't exist
	 *
	 * @param dto
	 */
	private void handleOneToOneRelationshipCreation(${dtoClass} dto) {
#foreach( $linkAttribute in $link.attributes )
#set( $fkAttribute = $linkAttribute.originAttribute )
		if (dto.${fkAttribute.getter}() != null) {
			if (!${link.targetEntity.name.toLowerCase()}Repository.existsById(dto.${fkAttribute.getter}())) {
				// Create a basic parent entity
				${link.targetEntity.name} parent = new ${link.targetEntity.name}();
				parent.set${fn.capitalize($link.targetEntity.keyAttribute.name)}(dto.${fkAttribute.getter}());
				// Set other required fields to default values
				${link.targetEntity.name.toLowerCase()}Repository.save(parent);
				logger.info("Created parent ${link.targetEntity.name} with ID: {}", dto.${fkAttribute.getter}());
			}
		}
#end
	}
#end
#end

	/**
	 * Deletes an entity by its PK <br>
	 * Handles cascading delete for one-to-one relationships
	 *
#foreach( $attribute in $entity.keyAttributes )   
	 * @param $attribute.name 
#end
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById($fn.argumentsListWithType($entity.keyAttributes)) {
		${jpaEntityIdClass} entityId = ${entityIdInit};
		logger.debug("deleteById({})", entityId);
		
		if (repository.existsById(entityId)) {
## Handle one-to-one relationship deletion
#foreach( $link in $entity.links )
#if ( $link.isCardinalityOneToOne() && !$link.isOwningEntity() )
			// Handle cascading delete for one-to-one relationship
			Optional<${jpaEntityClass}> entity = repository.findById(entityId);
			if (entity.isPresent()) {
#foreach( $linkAttribute in $link.attributes )
#set( $fkAttribute = $linkAttribute.originAttribute )
				${link.targetEntity.name}Id parentId = entity.get().${fkAttribute.getter}();
				if (parentId != null) {
					${link.targetEntity.name.toLowerCase()}Repository.deleteById(parentId);
					logger.info("Cascading delete: removed parent ${link.targetEntity.name} with ID: {}", parentId);
				}
#end
			}
#end
#end
			
			repository.deleteById(entityId);
			return true; // found and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	// -----------------------------------------------------------------------------------------
	// Specific "finders" for foreign key relationships
	// -----------------------------------------------------------------------------------------
#foreach( $link in $entity.links )
#if ( $link.isCardinalityManyToOne() )
#foreach( $linkAttribute in $link.attributes )
#set( $fkAttribute = $linkAttribute.originAttribute )
	
	/**
	 * Finds entities by ${link.targetEntity.name} reference
	 *
	 * @param ${fkAttribute.name} the ${link.targetEntity.name} ID
	 * @return list of entities
	 */
	public List<${dtoClass}> findBy${fn.capitalize($link.targetEntity.name)}(${fkAttribute.type} ${fkAttribute.name}) {
		logger.debug("findBy${fn.capitalize($link.targetEntity.name)}({})", ${fkAttribute.name});
#if( $fkAttribute.name.toLowerCase() == "partid" )
		List<${jpaEntityClass}> list = repository.findByPartID(${fkAttribute.name});
#elseif( $fkAttribute.name.toLowerCase() == "componentid" )
		List<${jpaEntityClass}> list = repository.findByComponentID(${fkAttribute.name});
#elseif( $fkAttribute.name.toLowerCase() == "accountid" )
		List<${jpaEntityClass}> list = repository.findByAccountID(${fkAttribute.name});
#elseif( $fkAttribute.name.toLowerCase() == "pcid" )
		List<${jpaEntityClass}> list = repository.findByPCID(${fkAttribute.name});
#else
		List<${jpaEntityClass}> list = repository.findBy${fn.capitalize($fkAttribute.name)}(${fkAttribute.name});
#end
		return entityListToDtoList(list);
	}
#end
#end
#end

## Special handling for standalone tables like Units
#if ( $entity.name == "Units" )
	/**
	 * Finds units by table name and field name
	 *
	 * @param tableName
	 * @param fieldName
	 * @return list of matching units
	 */
	public List<${dtoClass}> findByTableNameAndFieldName(String tableName, String fieldName) {
		logger.debug("findByTableNameAndFieldName({}, {})", tableName, fieldName);
		List<${jpaEntityClass}> list = repository.findByTableNameAndFieldName(tableName, fieldName);
		return entityListToDtoList(list);
	}
	
	/**
	 * Finds units by table name
	 *
	 * @param tableName
	 * @return list of matching units
	 */
	public List<${dtoClass}> findByTableName(String tableName) {
		logger.debug("findByTableName({})", tableName);
		List<${jpaEntityClass}> list = repository.findByTableName(tableName);
		return entityListToDtoList(list);
	}
#end

/***
	// Example custom finders - uncomment and modify as needed
	public List<${dtoClass}> findByTitle(String title) {
		logger.debug("findByTitle({})", title);
		List<${jpaEntityClass}> list = repository.findByTitleContaining(title);
		return entityListToDtoList(list);
	}

	public List<${dtoClass}> findByPrice(BigDecimal price) {
		logger.debug("findByPrice({})", price);
		List<${jpaEntityClass}> list = repository.findByPrice(price);
		return entityListToDtoList(list);
	}
***/
}